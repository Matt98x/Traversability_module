#!/usr/bin/env python

from dynamic_reconfigure.parameter_generator_catkin import (ParameterGenerator, bool_t, double_t, str_t, int_t)
import multiprocessing
import numpy as np

# python's builtin float type has 64 bits, which is too large for C floats (32
# bits usually) and thus crash the LVR arg parser. We thus use numpy's 32 bit
# float, but need to cast this to a python float
FLT_MAX = float(np.finfo('f').max)


gen = ParameterGenerator()

# point operations
gen.add("kd", int_t, 0, "Number of normals used for distance function evaluation", 50, 1, 1000)
gen.add("ki", int_t, 0, "Number of normals used in the normal interpolation process", 50, 1, 1000)
gen.add("kn", int_t, 0, "Size of k-neighborhood used for normal estimation", 50, 1, 1000)
gen.add("pcm", str_t, 0, "Point cloud manager used for point handling and normal estimation. "
        "Choose from {STANN, PCL, NABO}.", "FLANN")
gen.add("ransac", bool_t, 0, "Set this flag for RANSAC based normal estimation.", False)
gen.add("recalcNormals", bool_t, 0, "Always estimate normals, "
        "even if normals are already given.", False)

# mesh generation (marching cubes)
gen.add("decomposition", str_t, 0, "Defines the type of decomposition that is used for the voxels "
        "(Standard Marching Cubes (MC), Planar Marching Cubes (PMC), "
        "Standard Marching Cubes with sharp feature detection (SF) or "
        "Tetraeder (MT) decomposition). Choose from {MC, PMC, MT, SF}", "PMC")
gen.add("intersections", int_t, 0, "Number of intersections used for reconstruction. "
        "If other than -1, voxelsize will calculated automatically.", -1, -1, 10000)
gen.add("noExtrusion", bool_t, 0, "Do not extend grid. Can be used  to avoid artefacts in "
        "dense data sets but. Disabling will possibly create additional holes in sparse data sets.",
        False)
gen.add("voxelsize", double_t, 0, "Voxelsize of grid used for reconstruction.", 0.1, 0, 100)

# mesh optimisation
gen.add("cleanContours", int_t, 0, "Remove noise artifacts from contours. Same values are "
        "between 2 and 4.", 0, 0, 1000)
gen.add("clusterPlanes", bool_t, 0, "Cluster planar regions based on normal threshold, do not "
        "shift vertices into regression plane.", False)
gen.add("fillHoles", int_t, 0, "Maximum size for hole filling", 30, 0, 1000)
gen.add("lft", double_t, 0, "Line Fusion Threshold for fusing line segments while "
        "tesselating.", 0.01, 0, 1)
gen.add("mp", int_t, 0, "Minimum value for plane optimzation", 7, 0, 1000)
gen.add("optimizePlanes", bool_t, 0, "Shift all triangle vertices of a cluster onto "
        "their shared plane", False)
gen.add("planeIterations", int_t, 0, "Number of iterations for plane optimization", 3, 1, 10)
gen.add("smallRegionThreshold", int_t, 0, "Threshold for small region removal. "
        "If 0 nothing will be deleted.", 10, 0, 1000)
gen.add("pnt", double_t, 0, "(Plane Normal Threshold) Normal threshold for plane optimization. "
        "Default 0.85 equals about 3 degrees.", 0.85, 0, 1)
gen.add("rda", int_t, 0, "Remove dangling artifacts, i.e. remove the "
        "n smallest not connected surfaces", 0, 0, 1000)
gen.add("reductionRatio", double_t, 0, "Percentage of faces to remove via edge-collapse (0.0 means "
        "no reduction, 1.0 means to remove all faces which can be removed)", 0.0, 0.0, 1.0)
gen.add("retesselate", bool_t, 0, "Retesselate regions that are in a regression plane. "
        "--optimizePlanes has to be enabled.", False)

# textures
gen.add("generateTextures", bool_t, 0, "Generate textures during finalization.", False)
gen.add("nsc", int_t, 0, "Number of colors for texture statistics", 16, 0, 255)
gen.add("patt", double_t, 0, "Threshold for pattern extraction from textures", 100, 0, 1000)
gen.add("sct", double_t, 0, "Sharp corner threshold when using sharp "
        "feature decomposition", 0.7, 0, 1)
gen.add("sft", double_t, 0, "Sharp feature threshold when using sharp "
        "feature decomposition", 0.9, 0, 1)
gen.add("texelSize", double_t, 0, "Texel size that determines texture resolution.", 0.01, 0, 1000)
gen.add("texMaxClusterSize", int_t, 0, "Maximum number of faces of a cluster to "
        "create a texture from", 0, 0, 1000)
gen.add("texMinClusterSize", int_t, 0, "Minimum number of faces of a cluster to "
        "create a texture from", 100, 0, 1000)
gen.add("tp", str_t, 0, "Path to texture pack", "")

# texture matching
gen.add("textureAnalysis", bool_t, 0, "Enable texture analysis features for "
        "texture matching.", False)
gen.add("colt", double_t, 0, "Threshold for texture matching "
        "based on colors", FLT_MAX, 0, FLT_MAX)
gen.add("feat", double_t, 0, "Threshold for texture matching "
        "based on features", FLT_MAX, 0, FLT_MAX)
gen.add("stat", double_t, 0, "Threshold for texture matching "
        "based on statistics", FLT_MAX, 0, FLT_MAX)
gen.add("cro", bool_t, 0, "Use texture matching based on cross correlation.", False)
gen.add("ct", int_t, 0, "Coherence threshold for texture matching based on color "
        "information", 50, 0, 255)
gen.add("nccv", int_t, 0, "Number of colors for texture matching based on color "
        "information", 64, 0, 255)
gen.add("co", str_t, 0, "Coefficents file for texture matching based on statistics", "")

# opencl
gen.add("useGPU", bool_t, 0, "Use GPU for normal estimation", True)
gen.add("flipx", double_t, 0, "Flippoint x", -1000000, -1000000, 1000000)
gen.add("flipy", double_t, 0, "Flippoint y", -1000000, -1000000, 1000000)
gen.add("flipz", double_t, 0, "Flippoint z", -1000000, -1000000, 1000000)

# general
gen.add("classifier", str_t, 0, "Classfier object used to color the mesh.", "PlaneSimpsons")
gen.add("threads", int_t, 0, "Number of threads", multiprocessing.cpu_count(), 1, 16)
gen.add("vcfp", bool_t, 0, "Use color information from pointcloud to paint vertices ", False)

exit(gen.generate("lvr_ros", "lvr_ros", "Reconstruction"))
